var datas = {"problems": [{"context": "    26           String sql = \"select * from card where id = ?\";\n    27           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    28           preparedStatement.setString(1, id);\n--> 29           ResultSet resultSet = preparedStatement.executeQuery();\n    30           Card card = new Card();\n    31           if (resultSet.next()) {\n    32               card.setId(resultSet.getString(\"id\"));\n    33               card.setName(resultSet.getString(\"name\"));\n    34               card.setClassName(resultSet.getString(\"class_name\"));", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26           String sql = \"select * from card where id = ?\";\n    27           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    28           preparedStatement.setString(1, id);\n--> 29           ResultSet resultSet = preparedStatement.executeQuery();\n    30           Card card = new Card();\n    31           if (resultSet.next()) {\n    32               card.setId(resultSet.getString(\"id\"));\n    33               card.setName(resultSet.getString(\"name\"));\n    34               card.setClassName(resultSet.getString(\"class_name\"));", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    52           preparedStatement.setString(3, card.getClassName());\n    53           preparedStatement.setString(4, card.getPassword());\n    54   \n--> 55           preparedStatement.execute();\n    56       }\n    57   \n    58       // 更新\n    59       public static void updateCard(Card card) throws SQLException {\n    60           System.out.println(\"请重新输入个人信息：\");", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    79           preparedStatement.setString(5, oldId);\n    80   \n    81           System.out.println(preparedStatement.toString()); // 打印执行的sql语句\n--> 82           preparedStatement.execute();\n    83       }\n    84   \n    85       // 删除\n    86       public static void delete(Card card) throws SQLException {\n    87           String sql = \"delete from card where id = ?\";", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    87           String sql = \"delete from card where id = ?\";\n    88           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    89           preparedStatement.setString(1, card.getId());\n--> 90           preparedStatement.execute();\n    91       }\n    92   \n    93       // 充值\n    94       public static double recharge(Card card, Integer plusMoney) throws SQLException {\n    95           if (card.getNumOfBankCard() < plusMoney) {", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    104               preparedStatement.setDouble(2, card.getNumOfBankCard());\n    105               preparedStatement.setString(3, card.getId());\n    106               System.out.println(preparedStatement.toString());\n--> 107               preparedStatement.execute();\n    108               System.out.println(\"充值成功，您饭卡上的余额为：\" + card.getMoney());\n    109           }\n    110           return card.getMoney();\n    111       }\n    112   ", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    121               PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    122               preparedStatement.setDouble(1, card.getMoney());\n    123               preparedStatement.setString(2, card.getId());\n--> 124               preparedStatement.execute();\n    125   \n    126               System.out.println(\"你已消费\" + cost + \"元,卡上余额为\" + card.getMoney());\n    127           }\n    128       }\n    129   ", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-easy-meal-card-system\\src\\main\\java\\dao\\CardDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    30           preparedStatement.setString(7, goddess.getCreateUser());\n    31           preparedStatement.setString(8, goddess.getUpdateUser());\n    32           preparedStatement.setInt(9, goddess.getIsdel());\n--> 33           preparedStatement.execute();\n    34       }\n    35   \n    36       public void updateGoddess(Goddess goddess) throws Exception {\n    37           Connection connection = DBUtil.getConnection();\n    38           String sql = \"update goddess set user_name = ?,sex = ?,age = ?,birthday = ?,email = ?,mobile = ?,create_date = current_date(),update_user = ?,update_date = current_date(),isdel = ? where id = ?\";", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    47           preparedStatement.setString(7, goddess.getUpdateUser());\n    48           preparedStatement.setInt(8, goddess.getIsdel());\n    49           preparedStatement.setInt(9, goddess.getId());\n--> 50           preparedStatement.execute();\n    51       }\n    52   \n    53       public void delGoddess(Integer id) throws Exception {\n    54           Connection connection = DBUtil.getConnection();\n    55           String sql = \"delete from goddess where id = ?\";", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    56           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    57   \n    58           preparedStatement.setInt(1, id);\n--> 59           preparedStatement.execute();\n    60       }\n    61   \n    62       public List<Goddess> query() throws Exception {\n    63           Connection connection = DBUtil.getConnection();\n    64           Statement statement = connection.createStatement();", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    62       public List<Goddess> query() throws Exception {\n    63           Connection connection = DBUtil.getConnection();\n    64           Statement statement = connection.createStatement();\n--> 65           ResultSet resultSet = statement.executeQuery(\"select id,user_name,age from goddess\");\n    66   \n    67           List<Goddess> gs = new ArrayList<Goddess>();\n    68           Goddess g = null;\n    69           while (resultSet.next()) {\n    70               g = new Goddess();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    84           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    85   \n    86           preparedStatement.setInt(1, id);\n--> 87           ResultSet resultSet = preparedStatement.executeQuery();\n    88           while (resultSet.next()) {\n    89               goddess = new Goddess();\n    90               goddess.setId(resultSet.getInt(\"id\"));\n    91               goddess.setUserName(resultSet.getString(\"user_name\"));\n    92               goddess.setAge(resultSet.getInt(\"age\"));", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    84           PreparedStatement preparedStatement = connection.prepareStatement(sql);\n    85   \n    86           preparedStatement.setInt(1, id);\n--> 87           ResultSet resultSet = preparedStatement.executeQuery();\n    88           while (resultSet.next()) {\n    89               goddess = new Goddess();\n    90               goddess.setId(resultSet.getInt(\"id\"));\n    91               goddess.setUserName(resultSet.getString(\"user_name\"));\n    92               goddess.setAge(resultSet.getInt(\"age\"));", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    118           preparedStatement.setString(3, \"%\" + email + \"%\");\n    119   \n    120           System.out.println(preparedStatement.toString());\n--> 121           ResultSet resultSet = preparedStatement.executeQuery();\n    122   \n    123           Goddess goddess = null;\n    124           while (resultSet.next()) {\n    125               goddess = new Goddess();\n    126               goddess = new Goddess();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    118           preparedStatement.setString(3, \"%\" + email + \"%\");\n    119   \n    120           System.out.println(preparedStatement.toString());\n--> 121           ResultSet resultSet = preparedStatement.executeQuery();\n    122   \n    123           Goddess goddess = null;\n    124           while (resultSet.next()) {\n    125               goddess = new Goddess();\n    126               goddess = new Goddess();", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    159           PreparedStatement preparedStatement = connection.prepareStatement(stringBuilder.toString());\n    160   \n    161           System.out.println(preparedStatement.toString());\n--> 162           ResultSet resultSet = preparedStatement.executeQuery();\n    163   \n    164           Goddess goddess = null;\n    165           while (resultSet.next()) {\n    166               goddess = new Goddess();\n    167               goddess = new Goddess();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    159           PreparedStatement preparedStatement = connection.prepareStatement(stringBuilder.toString());\n    160   \n    161           System.out.println(preparedStatement.toString());\n--> 162           ResultSet resultSet = preparedStatement.executeQuery();\n    163   \n    164           Goddess goddess = null;\n    165           while (resultSet.next()) {\n    166               goddess = new Goddess();\n    167               goddess = new Goddess();", "match_type": "ast", "match_rule": "preparedStatement.execute", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\dao\\GoddessDao.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    35           Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);\n    36           // 3.通过数据库的连接操作数据库，实现增删改查\n    37           Statement statement = connection.createStatement();\n--> 38           ResultSet resultSet = statement.executeQuery(\"select user_name,age from goddess\");\n    39   \n    40           while (resultSet.next()) {\n    41               System.out.println(resultSet.getString(\"user_name\")+ \",\" + resultSet.getInt(\"age\"));\n    42           }\n    43       }", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\jdbc-girl\\src\\main\\java\\util\\DBUtil.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    44                                   ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n    45                                   try {\n    46                                       String methodName = input.readUTF();\n--> 47                                       Class<?>[] parameterTypes = (Class<?>[]) input.readObject();\n    48                                       Object[] arguments = (Object[]) input.readObject();//参数\n    49                                       ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n    50                                       try {\n    51                                           Method method = service.getClass().getMethod(methodName, parameterTypes);\n    52                                           Object result = method.invoke(service, arguments);", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": ".\\test\\java-project-practice-master\\rpc-easy-demo\\src\\com\\acts\\rpc\\RpcFramework.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    45                                   try {\n    46                                       String methodName = input.readUTF();\n    47                                       Class<?>[] parameterTypes = (Class<?>[]) input.readObject();\n--> 48                                       Object[] arguments = (Object[]) input.readObject();//参数\n    49                                       ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n    50                                       try {\n    51                                           Method method = service.getClass().getMethod(methodName, parameterTypes);\n    52                                           Object result = method.invoke(service, arguments);\n    53                                           output.writeObject(result);", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": ".\\test\\java-project-practice-master\\rpc-easy-demo\\src\\com\\acts\\rpc\\RpcFramework.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    106                           output.writeObject(arguments);\n    107                           ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n    108                           try {\n--> 109                               Object result = input.readObject();\n    110                               if (result instanceof Throwable) {\n    111                                   throw (Throwable) result;\n    112                               }\n    113                               return result;\n    114                           } finally {", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": ".\\test\\java-project-practice-master\\rpc-easy-demo\\src\\com\\acts\\rpc\\RpcFramework.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    26               pstmt = conn.prepareStatement(sql);\n    27               pstmt.setString(1, user.getUsername());\n    28               pstmt.setString(2, user.getPassword());\n--> 29               rs = pstmt.executeQuery();\n    30               if (rs.next()) {\n    31                   return true;\n    32               }\n    33           } catch (SQLException e) {\n    34               e.printStackTrace();", "match_type": "ast", "match_rule": "executeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\service\\UserService.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    34           try {\n    35               ois = new ObjectInputStream(socket.getInputStream());\n    36               oos = new ObjectOutputStream(socket.getOutputStream());\n--> 37               CommandTransfer transfer = (CommandTransfer) ois.readObject(); // 读取指令\n    38               execute(transfer);\n    39               oos.writeObject(transfer); //\n    40           } catch (IOException e) {\n    41               e.printStackTrace();\n    42           } catch (ClassNotFoundException e) {", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": ".\\test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\socket\\ServerThread.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    172           CommandTransfer transfer = null;\n    173           try {\n    174               ois = new ObjectInputStream(socket.getInputStream());\n--> 175               transfer = (CommandTransfer) ois.readObject();\n    176           } catch (IOException e) {\n    177               e.printStackTrace();\n    178           } catch (ClassNotFoundException e) {\n    179               e.printStackTrace();\n    180           }", "match_type": "ast", "match_rule": "readObject", "description": "java原生反序列化可能会出现", "file_path": ".\\test\\java-project-practice-master\\socket-study\\ScoketDemo\\src\\com\\imooc\\socket\\SocketClient.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    50       }\n    51   \n    52       private Query createNativeQuery(String sql, Object... params) {\n--> 53           Query nativeQuery = em.createNativeQuery(sql);\n    54           if (params != null && params.length > 0) {\n    55               for (int i = 0; i < params.length; i++) {\n    56                   nativeQuery.setParameter(i + 1, params[i]);  // 与Hiberante不同,jpa\n    57                                                                   // query从位置1开始\n    58               }", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    63       @SuppressWarnings({\"unchecked\"})// 告诉编译器忽略 unchecked 警告信息，如使用List，ArrayList等未进行参数化产生的警告信息。\n    64       @Override\n    65       public <T> List<T> nativeQueryList(String nativeSql, Object... params) {\n--> 66           Query nativeQuery = createNativeQuery(nativeSql, params);\n    67           nativeQuery.unwrap(SQLQuery.class).setResultTransformer(Transformers.TO_LIST);\n    68           return nativeQuery.getResultList();\n    69       }\n    70   \n    71       @SuppressWarnings({ \"unchecked\"})", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    71       @SuppressWarnings({ \"unchecked\"})\n    72       @Override\n    73       public <T> List<T> nativeQueryListMap(String nativeSql, Object... params) {\n--> 74           Query q = createNativeQuery(nativeSql, params);\n    75           q.unwrap(SQLQuery.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);\n    76           return q.getResultList();\n    77       }\n    78   \n    79       @SuppressWarnings({ \"unchecked\"})", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    79       @SuppressWarnings({ \"unchecked\"})\n    80       @Override\n    81       public <T> List<T> nativeQueryListModel(Class<T> resultClass, String nativeSql, Object... params) {\n--> 82           Query q = createNativeQuery(nativeSql, params);\n    83           q.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(resultClass));\n    84           return q.getResultList();\n    85       }\n    86   \n    87       @Override", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    86   \n    87       @Override\n    88       public Long nativeQueryCount(String nativeSql, Object... params) {\n--> 89           Object count = createNativeQuery(nativeSql, params).getSingleResult();\n    90           return ((Number) count).longValue();\n    91       }\n    92   }\n    93   ", "match_type": "ast", "match_rule": "createNativeQuery", "description": "sql注入可能会出现", "file_path": ".\\test\\java-project-practice-master\\spring-boot-mail\\src\\main\\java\\com\\gaohanghang\\mail\\common\\Dynamicquery\\DynamicQueryImpl.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}, {"context": "    7       }\n    8   \n    9       public Class loadByte(byte[] classBytes) {\n--> 10           return defineClass(null, classBytes, 0, classBytes.length);\n    11       }\n    12   }\n    13   ", "match_type": "ast", "match_rule": "defineClass", "description": "加载恶意字节码或链接库可能会出现", "file_path": ".\\test\\java-project-practice-master\\spring-boot-online-executor\\src\\main\\java\\com\\gaohanghang\\springbootonlineexecutor\\execute\\HotSwapClassLoader.java", "language": "java", "severity": "critical", "ptype": "后门", "confidence": 0.1}], "basic": {"totleNum": 30, "criticalLevel": 30, "highLevel": 0, "mediumLevel": 0, "lowLevel": 0, "prompt": 0}}